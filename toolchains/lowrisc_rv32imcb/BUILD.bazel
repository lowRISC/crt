# Copyright lowRISC contributors.
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

load("//config:compiler.bzl", "setup")
load("//platforms/riscv32:devices.bzl", "DEVICES")

package(default_visibility = ["//visibility:public"])

SYSTEM_INCLUDE_PATHS = [
    "external/lowrisc_rv32imcb_{}_files/lib/clang/16/include",
    "external/lowrisc_rv32imcb_{}_files/riscv32-unknown-elf/include",
    "external/lowrisc_rv32imcb_{}_files/riscv32-unknown-elf/include/c++/10.2.0",
    "external/lowrisc_rv32imcb_{}_files/riscv32-unknown-elf/include/c++/10.2.0/backward",
    "external/lowrisc_rv32imcb_{}_files/riscv32-unknown-elf/include/c++/10.2.0/riscv32-unknown-elf",
]

HOST_ARCHS = [
    "x86_64",
    "aarch64",
]

[filegroup(
    name = "compiler_components" + host_arch,
    srcs = [
        "//toolchains/lowrisc_rv32imcb/wrappers_{}:all".format(host_arch),
        "@lowrisc_rv32imcb_{}_files//:all".format(host_arch),
    ],
) for host_arch in HOST_ARCHS]

[
    [setup(
        name = "{}_{}".format(device.name, host_arch),
        architecture = device.architecture,
        artifact_naming = device.artifact_naming,
        compiler_components = ":compiler_components" + host_arch,
        constraints = device.constraints,
        feature_set = device.feature_set,
        include_directories = [path.format(host_arch) for path in SYSTEM_INCLUDE_PATHS],
        params = {
            "compiler": "clang",
            "host_arch": host_arch,
        },
        substitutions = device.substitutions,
        tools = {
            "ar": "wrappers_{}/ar".format(host_arch),
            "cpp": "wrappers_{}/cpp".format(host_arch),
            "gcc": "wrappers_{}/clang".format(host_arch),
            "gcov": "wrappers_{}/gcov".format(host_arch),
            "ld": "wrappers_{}/ld".format(host_arch),
            "nm": "wrappers_{}/nm".format(host_arch),
            "objcopy": "wrappers_{}/objcopy".format(host_arch),
            "objdump": "wrappers_{}/objdump".format(host_arch),
            "strip": "wrappers_{}/strip",
        },
    ) for device in DEVICES]
    for host_arch in HOST_ARCHS
]
