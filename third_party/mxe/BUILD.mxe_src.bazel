# Copyright lowRISC contributors.
# Licensed under the Apache License, Version 2.0, see LICENSE for details.
# SPDX-License-Identifier: Apache-2.0

package(default_visibility = ["//visibility:public"])

load("@rules_foreign_cc//foreign_cc:make.bzl", "make")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")

filegroup(
    name = "all_srcs",
    srcs = glob(["**"]),
)

TARGETS = {
    "win32": "i686-w64-mingw32.shared",
    "win64": "x86_64-w64-mingw32.shared",
}

binaries = [
    "{prefix}-addr2line",
    "{prefix}-ar",
    "{prefix}-as",
    "{prefix}-c++",
    "{prefix}-c++filt",
    "{prefix}-cpp",
    "{prefix}-dlltool",
    "{prefix}-dllwrap",
    "{prefix}-elfedit",
    "{prefix}-g++",
    "{prefix}-gcc",
    "{prefix}-gcc-11.3.0",
    "{prefix}-gcc-ar",
    "{prefix}-gcc-nm",
    "{prefix}-gcc-ranlib",
    "{prefix}-gcov",
    "{prefix}-gcov-dump",
    "{prefix}-gcov-tool",
    "{prefix}-gfortran",
    "{prefix}-gprof",
    "{prefix}-ld",
    "{prefix}-ld.bfd",
    "{prefix}-lto-dump",
    "{prefix}-nm",
    "{prefix}-objcopy",
    "{prefix}-objdump",
    "{prefix}-pkg-config",
    "{prefix}-ranlib",
    "{prefix}-readelf",
    "{prefix}-size",
    "{prefix}-strings",
    "{prefix}-strip",
    "{prefix}-windmc",
    "{prefix}-windres",
]

[make(
    name = "cc_{target}".format(target = target),
    args = [
        "MXE_TARGETS='{prefix}'".format(prefix = prefix),
    ],
    lib_source = ":all_srcs",
    out_binaries = [b.format(prefix = prefix) for b in binaries],
    tags = [
        "no-sandbox",
        "requires-network",
    ],
    targets = ["cc"],
) for target, prefix in TARGETS.items()]

[filegroup(
    name = "gen_dir_{target}".format(target = target),
    srcs = [":cc_{target}".format(target = target)],
    output_group = "gen_dir",
) for target, _ in TARGETS.items()]

[pkg_tar(
    name = "mxe-binaries-{target}".format(target = target),
    srcs = [":gen_dir_{target}".format(target = target)],
    extension = "tar.xz",
    package_dir = "mxe",
    strip_prefix = "external/mxe_src/copy_cc_{target}/cc_{target}".format(target = target),
) for target, _ in TARGETS.items()]
